See the Assessment Guide for information on how to interpret this report.

ASSESSMENT SUMMARY

Compilation:  PASSED
API:          PASSED

Spotbugs:     FAILED (3 warnings)
PMD:          FAILED (5 warnings)
Checkstyle:   FAILED (0 errors, 15 warnings)

Correctness:  29/68 tests passed
Memory:       10/10 tests passed
Timing:       25/26 tests passed

Aggregate score: 64.82%
[Compilation: 5%, API: 5%, Spotbugs: 0%, PMD: 0%, Checkstyle: 0%, Correctness: 60%, Memory: 10%, Timing: 20%]

ASSESSMENT DETAILS

The following files were submitted:
----------------------------------
2.3K Feb  9 18:37 BurrowsWheeler.java
1.3K Feb  9 18:37 CircularSuffixArray.java
2.5K Feb  9 18:37 MoveToFront.java


********************************************************************************
*  COMPILING                                                                    
********************************************************************************


% javac11 CircularSuffixArray.java
*-----------------------------------------------------------

% javac11 BurrowsWheeler.java
*-----------------------------------------------------------

% javac11 MoveToFront.java
*-----------------------------------------------------------


================================================================


Checking the APIs of your programs.
*-----------------------------------------------------------
CircularSuffixArray:

BurrowsWheeler:

MoveToFront:

================================================================


********************************************************************************
*  CHECKING STYLE AND COMMON BUG PATTERNS                                       
********************************************************************************


% spotbugs *.class
*-----------------------------------------------------------
L C IP_PARAMETER_IS_DEAD_BUT_OVERWRITTEN IP: The parameter variable 'z' is overwritten before it is used. This often indicates a mistaken belief that the write to the parameter variable will be conveyed back to the caller.  At MoveToFront.java:[line 12]
L C IP_PARAMETER_IS_DEAD_BUT_OVERWRITTEN IP: The parameter variable 'z' is overwritten before it is used. This often indicates a mistaken belief that the write to the parameter variable will be conveyed back to the caller.  At MoveToFront.java:[line 29]
H D ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD ST: The instance method or constructor 'CircularSuffixArray(String)' writes to the static variable 'sa', which is generally bad style.  At CircularSuffixArray.java:[line 19]
Warnings generated: 3


================================================================


% pmd .
*-----------------------------------------------------------
CircularSuffixArray.java:9: The private instance (or static) variable 'x' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
CircularSuffixArray.java:10: The private instance (or static) variable 'sortSuffixes' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
CircularSuffixArray.java:19: Possible unsafe assignment to a non-final static field in a constructor. [AssignmentToNonFinalStatic]
MoveToFront.java:10: Linguistics Antipattern - The transform method 'toEncode' should not return void linguistically [LinguisticNaming]
MoveToFront.java:27: Linguistics Antipattern - The transform method 'toDecode' should not return void linguistically [LinguisticNaming]
PMD ends with 5 warnings.


================================================================


% checkstyle *.java
*-----------------------------------------------------------
[WARN] BurrowsWheeler.java:1:8: Unused import statement for 'edu.princeton.cs.algs4.StdOut'. [UnusedImports]
[WARN] BurrowsWheeler.java:17:43: '++' is preceded with whitespace. [NoWhitespaceBefore]
[WARN] BurrowsWheeler.java:23:43: '++' is preceded with whitespace. [NoWhitespaceBefore]
[WARN] BurrowsWheeler.java:35:13: '(' is followed by whitespace. [ParenPad]
[WARN] BurrowsWheeler.java:35:47: '++' is preceded with whitespace. [NoWhitespaceBefore]
[WARN] CircularSuffixArray.java:11:5: Declare static variables before instance variables, constructors, and methods. [DeclarationOrder]
[WARN] CircularSuffixArray.java:47:5: File contains tab characters (this is the first occurrence). Configure your editor to replace tabs with spaces. [FileTabCharacter]
Checkstyle ends with 0 errors and 7 warnings.

% custom checkstyle checks for CircularSuffixArray.java
*-----------------------------------------------------------
[WARN] CircularSuffixArray.java:1: Declaring 1 non-final static variables ('sa') suggests poor design in this class. [StaticVariableCount]
Checkstyle ends with 0 errors and 1 warning.

% custom checkstyle checks for BurrowsWheeler.java
*-----------------------------------------------------------
[WARN] BurrowsWheeler.java:20:16: You will probably not meet the performance requirement for 'transform()' if you call 'Arrays.sort()'. [Performance]
[WARN] BurrowsWheeler.java:40:31: The numeric literal '257' appears to be unnecessary. [NumericLiteral]
Checkstyle ends with 0 errors and 2 warnings.

% custom checkstyle checks for MoveToFront.java
*-----------------------------------------------------------
[WARN] MoveToFront.java:1: You must call either 'BinaryStdOut.flush()' or 'BinaryStdOut.close()' in 'decode()'. [MethodCallCount]
[WARN] MoveToFront.java:1: You must call either 'BinaryStdOut.flush()' or 'BinaryStdOut.close()' in 'encode()'. [MethodCallCount]
[WARN] MoveToFront.java:1:1: The constant '256' appears more than once. Define a constant variable (such as 'EXTENDED_ASCII') to hold the constant '256'. [NumericLiteralCount]
[WARN] MoveToFront.java:53: Creating more than one object per call to 'encode()' can degrade performance. [Performance]
[WARN] MoveToFront.java:73: Creating more than one object per call to 'decode()' can degrade performance. [Performance]
Checkstyle ends with 0 errors and 5 warnings.


================================================================


********************************************************************************
*  TESTING CORRECTNESS
********************************************************************************

Testing correctness of CircularSuffixArray
*-----------------------------------------------------------
Running 15 total tests.

Test 1: check index() and length() with random binary strings
  * length = 10
    - string = "BAABAAABAA"
    - mismatch in indices
    - student   index(0) = 0
    - reference index(0) = 4

    - failed on trial 1 of 1000

  * length = 100
    - string = "AABBBAABBABAABABBABAABABBBBAABAAABABABBBBBBAAABABAABBBBABBBA..."
    - mismatch in indices
    - student   index(0) = 0
    - reference index(0) = 43

    - failed on trial 1 of 1000

  * length = 1000
    - string = "BBBAABABBBBBBBBAABBAABAAABAAABBABABAABABAAABBBABAABBABABAABB..."
    - mismatch in indices
    - student   index(0) = 0
    - reference index(0) = 827

    - failed on trial 1 of 1000

==> FAILED

Test 2: check index() and length() with random uppercase strings
  * length = 10
    - string = "UELVYJWJEW"
    - mismatch in indices
    - student   index(0) = 0
    - reference index(0) = 1

    - failed on trial 1 of 1000

  * length = 100
    - string = "SGQSBQXAUFRAWHTVKWXLZUFZHUNCVOQBDMHIWYQVWFPQJIYZLMRFKKZLUGFC..."
    - mismatch in indices
    - student   index(0) = 0
    - reference index(0) = 86

    - failed on trial 1 of 1000

  * length = 1000
    - string = "MAXHIHMXLFEEEKXDBGFTSKQVYHPHDKLUJVNJLWQQIITXCPVHYSONHRUGQHXC..."
    - mismatch in indices
    - student   index(0) = 0
    - reference index(0) = 481

    - failed on trial 1 of 1000

==> FAILED

Test 3: check index() and length() with random ASCII strings
  * length = 10
    - string = hex representation: 04 39 3c 74 7d 7f 05 7e 0b 7c 
    - mismatch in indices
    - student   index(1) = 1
    - reference index(1) = 6

    - failed on trial 1 of 1000

  * length = 100
    - string = hex representation: 2f 64 42 7f 76 35 35 7f 09 3e 2b 2c 1c 27 1a 36 13 13 3d 58 ...
    - mismatch in indices
    - student   index(0) = 0
    - reference index(0) = 99

    - failed on trial 1 of 1000

  * length = 1000
    - string = hex representation: 50 66 02 56 48 79 5a 42 74 43 40 05 00 47 3b 21 59 64 0a 1e ...
    - mismatch in indices
    - student   index(0) = 0
    - reference index(0) = 24

    - failed on trial 1 of 1000

==> FAILED

Test 4: check index() and length() with random extended ASCII strings
  * length = 10
    - string = hex representation: 6b 60 06 7a b4 2b d4 09 85 a1 
    - mismatch in indices
    - student   index(0) = 0
    - reference index(0) = 2

    - failed on trial 1 of 1000

  * length = 100
    - string = hex representation: e0 81 22 b6 3e 70 ac 97 89 d9 2f 9d 58 b3 67 c4 6b e1 ae 10 ...
    - mismatch in indices
    - student   index(0) = 0
    - reference index(0) = 59

    - failed on trial 1 of 1000

  * length = 1000
    - string = hex representation: 7e a2 20 45 44 86 b4 05 49 58 a8 08 81 e4 b2 3b bb e1 27 c6 ...
    - mismatch in indices
    - student   index(0) = 0
    - reference index(0) = 575

    - failed on trial 1 of 1000

==> FAILED

Test 5: check index() and length() with strings from text files
  * cadabra.txt
    - string = "CADABRA!ABRA"
    - mismatch in indices
    - student   index(0) = 0
    - reference index(0) = 7

  * amendments.txt
    - string = "Article I. Congress shall make no law respecting an establis..."
    - mismatch in indices
    - student   index(0) = 0
    - reference index(0) = 14383

  * moby1.txt
    - string = "Call me Ishmael. Some years ago- never mind how long precise..."
    - mismatch in indices
    - student   index(0) = 0
    - reference index(0) = 10396

  * dickens1000.txt
    - string = "It was the best of times, it was the worst of times, it was ..."
    - mismatch in indices
    - student   index(0) = 0
    - reference index(0) = 946

==> FAILED

Test 6: check index() and length() with strings from binary files
  * us.gif
    - string = hex representation: 47 49 46 38 39 61 8e 01 01 01 d5 00 00 94 18 29 06 02 03 84 ...
    - mismatch in indices
    - student   index(0) = 0
    - reference index(0) = 206

  * CS_bricks.jpg
    - string = hex representation: ff d8 ff e1 00 16 45 78 69 66 00 00 4d 4d 00 2a 00 00 00 08 ...
    - mismatch in indices
    - student   index(0) = 0
    - reference index(0) = 403

  * rand1K.bin
    - string = hex representation: 91 a6 be ff 17 30 3b c2 90 4c dc 6f 14 73 64 27 04 6b 87 8a ...
    - mismatch in indices
    - student   index(0) = 0
    - reference index(0) = 795

==> FAILED

Test 7: check index() and length() with random strings of length 0, 1, and 2
  * length = 0
  * length = 1
  * length = 2
    - string = "IH"
    - mismatch in indices
    - student   index(0) = 0
    - reference index(0) = 1

    - failed on trial 1 of 100

==> FAILED

Test 8: check that index() throws an exception when argument is out of bounds
  * string of length 10
  * string of length 100
  * string of length 2
  * string of length 1
  * string of length 0
==> passed

Test 9: check that constructor throws an exception when argument is null
==> passed

Test 10: check that two CircularSuffixArray objects can be created at the same time
  * cadabra.txt and amendments.txt
    - string = "CADABRA!ABRA"
    - mismatch in indices
    - student   index(0) = 0
    - reference index(0) = 7

    - string = "Article I. Congress shall make no law respecting an establis..."
    - mismatch in indices
    - student   index(0) = 0
    - reference index(0) = 14383

  * amendments.txt and cadabra.txt
    - string = "Article I. Congress shall make no law respecting an establis..."
    - mismatch in indices
    - student   index(0) = 0
    - reference index(0) = 14383

    - string = "CADABRA!ABRA"
    - mismatch in indices
    - student   index(0) = 0
    - reference index(0) = 7

  * dickens1000.txt and cadabra.txt
    - string = "It was the best of times, it was the worst of times, it was ..."
    - mismatch in indices
    - student   index(0) = 0
    - reference index(0) = 946

    - string = "CADABRA!ABRA"
    - mismatch in indices
    - student   index(0) = 0
    - reference index(0) = 7

==> FAILED

Test 11: check that CircularSuffixArray is immutable
  * string = "UPFQCZFHGGJHZJJBKMPVXBFWXDKYEH"
  * string = "ABABBAABABBAAABAABBAABABBABAAA"
  * string = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
  * string = hex representation: 57 ba 5b f4 e1 bc 05 d0 36 fd a0 05 93 7c bf 
==> passed

Test 12: check index() and length() with corner-case strings
  * a.txt
  * nomatch.txt
    - string = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ12345678..."
    - mismatch in indices
    - student   index(0) = 0
    - reference index(0) = 72

  * zebra.txt
    - string = "zebra"
    - mismatch in indices
    - student   index(0) = 0
    - reference index(0) = 4

  * alphanum.txt
    - string = "abcdefghijklmnopqrstuvwxyz0123456789"
    - mismatch in indices
    - student   index(0) = 0
    - reference index(0) = 26

==> FAILED

Test 13: check index() and length() with strings that are nontrivial circular
         that are nontrivial circular suffixes of themselves
  * stars.txt
  * couscous.txt
    - string = "couscous"
    - mismatch in indices
    - student   index(1) = 1
    - reference index(1) = 4

==> FAILED

Test 14: check index() and length() with unary strings
  * length 10 string over unary alphabet
  * length 100 string over unary alphabet
  * length 1000 string over unary alphabet
==> passed

Test 15: check index() and length() with random strings
         that are nontrivial circular suffixes of themselves
  * length 2 string over binary alphabet, repeated 2 times
    - string = "BABA"
    - mismatch in indices
    - student   index(0) = 0
    - reference index(0) = 1

    - failed on trial 2 of 5

  * length 2 string over binary alphabet, repeated 10 times
    - string = "BABABABABABABABABABA"
    - mismatch in indices
    - student   index(0) = 0
    - reference index(0) = 1

    - failed on trial 1 of 5

  * length 5 string over binary alphabet, repeated 2 times
    - string = "ABAABABAAB"
    - mismatch in indices
    - student   index(0) = 0
    - reference index(0) = 2

    - failed on trial 1 of 5

  * length 5 string over binary alphabet, repeated 3 times
    - string = "BBBAABBBAABBBAA"
    - mismatch in indices
    - student   index(0) = 0
    - reference index(0) = 3

    - failed on trial 1 of 5

  * length 5 string over binary alphabet, repeated 5 times
    - string = "BAABBBAABBBAABBBAABBBAABB"
    - mismatch in indices
    - student   index(0) = 0
    - reference index(0) = 1

    - failed on trial 1 of 5

  * length 7 string over uppercase alphabet, repeated 2 times
    - string = "EXPKZUVEXPKZUV"
    - mismatch in indices
    - student   index(1) = 1
    - reference index(1) = 7

    - failed on trial 1 of 5

  * length 7 string over uppercase alphabet, repeated 3 times
    - string = "WRKNFTQWRKNFTQWRKNFTQ"
    - mismatch in indices
    - student   index(0) = 0
    - reference index(0) = 4

    - failed on trial 1 of 5

  * length 7 string over uppercase alphabet, repeated 5 times
    - string = "EGSHBKGEGSHBKGEGSHBKGEGSHBKGEGSHBKG"
    - mismatch in indices
    - student   index(0) = 0
    - reference index(0) = 4

    - failed on trial 1 of 5

==> FAILED

Total: 4/15 tests passed!


================================================================
Testing correctness of MoveToFront
*-----------------------------------------------------------
Running 25 total tests.

Test 1a: check main() on text files
  * java MoveToFront - < abra.txt
  * java MoveToFront - < zebra.txt
  * java MoveToFront - < amendments.txt
  * java MoveToFront - < aesop.txt


WARNING: the time limit of 180 seconds was exceeded, so not all tests could be completed.



Total: 0/25 tests passed: Could not complete tests, which results in a reported score of 0.
================================================================
********************************************************************************
*  TESTING CORRECTNESS (substituting reference CircularSuffixArray)
********************************************************************************

Testing correctness of BurrowsWheeler
*-----------------------------------------------------------
Running 28 total tests.

Test 1a: check main() on text files
  * java BurrowsWheeler - < abra.txt
  * java BurrowsWheeler - < zebra.txt
  * java BurrowsWheeler - < cadabra.txt
  * java BurrowsWheeler - < amendments.txt
==> passed

Test 1b: check main() on text files
  * java BurrowsWheeler + < abra.txt.bwt
  * java BurrowsWheeler + < zebra.txt.bwt
  * java BurrowsWheeler + < cadabra.txt.bwt
  * java BurrowsWheeler + < amendments.txt.bwt
==> passed

Test 2a: check parsing of argument "-" in main() on text files
  * java BurrowsWheeler - < abra.txt
  * java BurrowsWheeler - < zebra.txt
  * java BurrowsWheeler - < cadabra.txt
  * java BurrowsWheeler - < amendments.txt
==> passed

Test 2b: check parsing of argument "+" in main() on text files
  * java BurrowsWheeler + < abra.txt.bwt
  * java BurrowsWheeler + < zebra.txt.bwt
  * java BurrowsWheeler + < cadabra.txt.bwt
  * java BurrowsWheeler + < amendments.txt.bwt
==> passed

Test 3a: check that main() is consistent with transform() on text files
  * abra.txt
  * zebra.txt
  * cadabra.txt
  * amendments.txt
==> passed

Test 3b: check that main() is consistent with inverseTransform() on text files
  * abra.txt.bwt
  * zebra.txt.bwt
  * cadabra.txt.bwt
  * amendments.txt.bwt
==> passed

Test 4a: check transform() on text files
  * abra.txt
  * zebra.txt
  * cadabra.txt
  * amendments.txt
==> passed

Test 4b: check transform() on corner-case text files
  * alphanum.txt
  * a.txt
==> passed

Test 4c: check transform() on binary files
  * us.gif
  * CS_bricks.jpg
  * rand10K.bin
==> passed

Test 4d: check transform() on random inputs
  * 10 random characters from binary alphabet
  * 10 random characters from DNA alphabet
  * 10 random characters from uppercase alphabet
  * 1000 random characters from binary alphabet
  * 1000 random characters from DNA alphabet
  * 1000 random characters from uppercase alphabet
==> passed

Test 4e: check transform() on more random inputs
  * 1000 random characters from ASCII alphabet 
  * 1000 random characters from extended ASCII alphabet
  * 1000 random characters from extended ASCII alphabet (excluding 0x00)
  * 1000 random characters from extended ASCII alphabet (excluding 0xFF)
==> passed

Test 4f: check tranform() on random inputs that are circular
         shifts of themselves
  * 5 random strings from unary alphabet
  * 5 random strings from binary alphabet
  * 5 random strings from DNA alphabet
  * 5 random strings from uppercase alphabet
==> passed

Test 5a: check inverseTransform() on text files
  * abra.txt.bwt
  * zebra.txt.bwt
  * cadabra.txt.bwt
  * amendments.txt.bwt
==> passed

Test 5b: check inverseTransform() on corner-case text files
  * alphanum.txt.bwt
  * a.txt.bwt
  * stars.txt.bwt
  * couscous.txt.bwt
==> passed

Test 5c: check inverseTransform() on binary files
  * us.gif.bwt
  * CS_bricks.jpg.bwt
  * rand10K.bin.bwt
==> passed

Test 5d: check inverseTransform() of transform() on random inputs
  * 10 random characters from unary alphabet
  * 10 random characters from binary alphabet
  * 10 random characters from DNA alphabet
  * 10 random characters from uppercase alphabet
  * 100 random characters from unary alphabet
  * 1000 random characters from binary alphabet
  * 1000 random characters from DNA alphabet
  * 1000 random characters from uppercase alphabet
==> passed

Test 5e: check inverseTransform() of transform() on more random inputs
  * 1000 random characters from ASCII alphabet 
  * 1000 random characters from extended ASCII alphabet
  * 1000 random characters from extended ASCII alphabet (excluding 0x00)
  * 1000 random characters from extended ASCII alphabet (excluding 0xFF)
==> passed

Test 6a: check that inverseTransform(transform()) = original on text files
  * abra.txt
  * zebra.txt
  * cadabra.txt
  * amendments.txt
==> passed

Test 6b: check that inverseTransform(transform()) = original on corner-case text files
  * alphanum.txt
  * a.txt
  * stars.txt
  * couscous.txt
==> passed

Test 6c: check that inverseTransform(transform()) = original on binary files
  * us.gif
  * CS_bricks.jpg
  * rand10K.bin
==> passed

Test 6d: check that inverseTransform(tranform()) = original on random inputs
  * 10 random characters from binary alphabet
  * 10 random characters from DNA alphabet
  * 10 random characters from uppercase alphabet
  * 1000 random characters from binary alphabet
  * 1000 random characters from DNA alphabet
  * 1000 random characters from uppercase alphabet
==> passed

Test 6e: check that inverseTransform(tranform()) = original on random inputs
  * 1000 random characters from ASCII alphabet 
  * 1000 random characters from extended ASCII alphabet
  * 1000 random characters from extended ASCII alphabet (excluding 0x00)
  * 1000 random characters from extended ASCII alphabet (excluding 0xFF)
==> passed

Test 6f: check that inverseTransform(tranform()) = original
         on random inputs that are circular shifts of themselves
  * random strings from unary alphabet
  * random strings from binary alphabet
  * random strings from DNA alphabet
  * random strings from uppercase alphabet
==> passed

Test 7a: check that transform() calls either close() or flush()
  * amendments.txt
  * aesop.txt


    java.lang.OutOfMemoryError: Java heap space

    java.base/java.util.Arrays.copyOfRange(Arrays.java:4030)
    java.base/java.lang.StringLatin1.newString(StringLatin1.java:715)
    java.base/java.lang.String.substring(String.java:1922)
    BurrowsWheeler.transform(BurrowsWheeler.java:18)
    TestBurrowsWheeler.checkTransform(TestBurrowsWheeler.java:295)
    TestBurrowsWheeler.checkTransform(TestBurrowsWheeler.java:278)
    TestBurrowsWheeler.test7a(TestBurrowsWheeler.java:749)
    TestBurrowsWheeler.main(TestBurrowsWheeler.java:864)

==> FAILED

Test 7b: check that inverseTransform() calls either close() or flush()
  * amendments.txt.bwt
  * aesop.txt.bwt
==> passed

Test 8a: check transform() on large files
  * rand100K.bin


    java.lang.OutOfMemoryError: Java heap space

    java.base/java.util.Arrays.copyOfRange(Arrays.java:4030)
    java.base/java.lang.StringLatin1.newString(StringLatin1.java:715)
    java.base/java.lang.String.substring(String.java:1922)
    BurrowsWheeler.transform(BurrowsWheeler.java:18)
    TestBurrowsWheeler.checkTransform(TestBurrowsWheeler.java:295)
    TestBurrowsWheeler.checkTransform(TestBurrowsWheeler.java:278)
    TestBurrowsWheeler.checkTransform(TestBurrowsWheeler.java:272)
    TestBurrowsWheeler.test8a(TestBurrowsWheeler.java:764)
    TestBurrowsWheeler.main(TestBurrowsWheeler.java:870)

  * world192.txt


    java.lang.OutOfMemoryError: Java heap space


==> FAILED

Test 8b: check inverseTransform() on large files
  * rand100K.bin.bwt
  * world192.txt.bwt
==> passed

Test 8c: check that inverseTransform(transform()) = original on large files
  * rand100K.bin


    java.lang.OutOfMemoryError: Java heap space


  * world192.txt


    java.lang.OutOfMemoryError: Java heap space


==> FAILED


Total: 25/28 tests passed!


================================================================
********************************************************************************
*  MEMORY
********************************************************************************

Analyzing memory of CircularSuffixArray
*-----------------------------------------------------------
Running 10 total tests.

Memory usage of a CircularSuffixArray for a random string of length n.
Maximum allowed memory is 64n + 128.

                 n        bytes
-------------------------------
=> passed       16          192
=> passed       32          272
=> passed       64          432
=> passed      128          752
=> passed      256         1392
=> passed      512         2672
=> passed     1024         5232
=> passed     2048        10352
=> passed     4096        20592
=> passed     8192        41072
==> 10/10 tests passed

Total: 10/10 tests passed!

Estimated student memory (bytes) = 5.00 n + 112.00   (R^2 = 1.000)

================================================================



********************************************************************************
*  TIMING
********************************************************************************

Timing CircularSuffixArray
*-----------------------------------------------------------
Running 26 total tests.

Tests  1-13: time to create a circular suffix array for the first
             n character of dickens.txt and call index(i) for each i

            [ max allowed time = 10 seconds and <= 12x reference ]

                 n    student  reference      ratio
---------------------------------------------------
=> passed     1000       0.01       0.00      26.48
=> passed     2000       0.00       0.00       5.61
=> passed     4000       0.01       0.00       6.14
=> passed     8000       0.01       0.00       5.55
=> passed    16000       0.01       0.00       3.96
=> passed    32000       0.03       0.00       6.07
=> passed    64000       0.08       0.01      12.66
=> passed   128000       0.13       0.01      11.52
=> passed   256000       0.25       0.03       9.61
=> passed   512000       0.46       0.05       9.64
=> passed  1024000       1.02       0.10       9.71
=> passed  2048000       2.47       0.23      10.90
=> passed  4096000       5.76       0.51      11.33

Estimated running time (using last 6 measurements)
    = 2.71e-07 * n^1.10  (R^2 = 0.99)


Tests 14-26: time to create circular suffix array for n random ASCII characters
            and call index(i) for each i

            [ max allowed time = 10 seconds and <= 20x reference ]

                 n    student  reference      ratio
---------------------------------------------------
=> passed     1000       0.00       0.00       6.62
=> passed     2000       0.00       0.00       4.48
=> passed     4000       0.00       0.00       4.40
=> passed     8000       0.00       0.00       7.31
=> passed    16000       0.01       0.00       9.72
=> passed    32000       0.01       0.00      14.18
=> passed    64000       0.03       0.00      15.15
=> passed   128000       0.06       0.00      13.26
=> passed   256000       0.15       0.01      11.55
=> passed   512000       0.32       0.03      11.41
=> passed  1024000       0.79       0.05      15.83
=> passed  2048000       1.77       0.10      17.80
=> FAILED  4096000       4.17       0.17      23.89

Estimated running time (using last 6 measurements)
    = 3.45e-08 * n^1.22  (R^2 = 1.00)


Total: 25/26 tests passed!


================================================================



********************************************************************************
*  TIMING
********************************************************************************

Timing MoveToFront
*-----------------------------------------------------------
Running 38 total tests.

Test 1: count calls to methods in BinaryStdOut from encode()
  * abra.txt
  * amendments.txt
==> passed

Test 2: count calls to methods in BinaryStdOut from decode()
  * abra.txt.mtf
  * amendments.txt.mtf
==> passed

Tests  3-12: Timing encode() with first n character of dickens.txt
             [ max allowed time = 2 seconds and <= 4x reference ]

                 n    student  reference      ratio
---------------------------------------------------
=> passed     1000       0.00       0.00       1.15
=> passed     2000       0.00       0.00       1.71
=> passed     4000       0.01       0.00       1.76
=> passed     8000       0.01       0.01       1.75
=> passed    16000       0.02       0.01       1.78
=> passed    32000       0.04       0.03       1.76
=> passed    64000       0.09       0.05       1.79